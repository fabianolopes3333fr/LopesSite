# Generated by Django 5.1.6 on 2025-02-25 22:17

import django.db.models.deletion
import mptt.fields
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='DjangoTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Nome do template', max_length=100, verbose_name='Nome')),
                ('slug', models.SlugField(help_text='Identificador único para o template', max_length=100, unique=True, verbose_name='Slug')),
                ('description', models.TextField(blank=True, help_text='Descrição do propósito do template', verbose_name='Descrição')),
                ('is_active', models.BooleanField(default=True, help_text='Define se o template está disponível para uso', verbose_name='Ativo')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Data de Criação')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Última Atualização')),
                ('file_path', models.CharField(help_text='Caminho relativo ao diretório de templates', max_length=255, verbose_name='Caminho do Arquivo')),
                ('default_context', models.JSONField(blank=True, help_text='Variáveis de contexto padrão em formato JSON', null=True, verbose_name='Contexto Padrão')),
                ('preview_image', models.ImageField(blank=True, help_text='Imagem de prévia do template', null=True, upload_to='templates/previews/', verbose_name='Imagem de Prévia')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL, verbose_name='Criado por')),
                ('updated_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='Atualizado por')),
            ],
            options={
                'verbose_name': 'Template Django',
                'verbose_name_plural': 'Templates Django',
            },
        ),
        migrations.CreateModel(
            name='LayoutTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Nome do template', max_length=100, verbose_name='Nome')),
                ('slug', models.SlugField(help_text='Identificador único para o template', max_length=100, unique=True, verbose_name='Slug')),
                ('description', models.TextField(blank=True, help_text='Descrição do propósito do template', verbose_name='Descrição')),
                ('is_active', models.BooleanField(default=True, help_text='Define se o template está disponível para uso', verbose_name='Ativo')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Data de Criação')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Última Atualização')),
                ('thumbnail', models.ImageField(blank=True, help_text='Imagem miniatura do layout', null=True, upload_to='layouts/thumbnails/', verbose_name='Miniatura')),
                ('css_classes', models.CharField(blank=True, help_text='Classes CSS adicionais para o layout', max_length=255, verbose_name='Classes CSS')),
                ('is_default', models.BooleanField(default=False, help_text='Define se este é o layout padrão', verbose_name='Padrão')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL, verbose_name='Criado por')),
                ('footer', models.ForeignKey(blank=True, limit_choices_to={'type__type': 'footer'}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='layout_footers', to='widgets.djangotemplate', verbose_name='Rodapé')),
                ('header', models.ForeignKey(blank=True, limit_choices_to={'type__type': 'header'}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='layout_headers', to='widgets.djangotemplate', verbose_name='Cabeçalho')),
                ('sidebar', models.ForeignKey(blank=True, limit_choices_to={'type__type': 'sidebar'}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='layout_sidebars', to='widgets.djangotemplate', verbose_name='Barra Lateral')),
                ('template', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='layouts', to='widgets.djangotemplate', verbose_name='Template Base')),
                ('updated_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='Atualizado por')),
            ],
            options={
                'verbose_name': 'Layout',
                'verbose_name_plural': 'Layouts',
            },
        ),
        migrations.CreateModel(
            name='TemplateCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Nome do template', max_length=100, verbose_name='Nome')),
                ('slug', models.SlugField(help_text='Identificador único para o template', max_length=100, unique=True, verbose_name='Slug')),
                ('description', models.TextField(blank=True, help_text='Descrição do propósito do template', verbose_name='Descrição')),
                ('is_active', models.BooleanField(default=True, help_text='Define se o template está disponível para uso', verbose_name='Ativo')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Data de Criação')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Última Atualização')),
                ('icon', models.CharField(blank=True, help_text='Nome da classe do ícone (FontAwesome, Bootstrap Icons, etc.)', max_length=50, verbose_name='Ícone')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL, verbose_name='Criado por')),
                ('parent', mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='children', to='widgets.templatecategory', verbose_name='Categoria Pai')),
                ('updated_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='Atualizado por')),
            ],
            options={
                'verbose_name': 'Categoria de Template',
                'verbose_name_plural': 'Categorias de Templates',
            },
        ),
        migrations.CreateModel(
            name='ComponentTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Nome do template', max_length=100, verbose_name='Nome')),
                ('slug', models.SlugField(help_text='Identificador único para o template', max_length=100, unique=True, verbose_name='Slug')),
                ('description', models.TextField(blank=True, help_text='Descrição do propósito do template', verbose_name='Descrição')),
                ('is_active', models.BooleanField(default=True, help_text='Define se o template está disponível para uso', verbose_name='Ativo')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Data de Criação')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Última Atualização')),
                ('component_type', models.CharField(choices=[('card', 'Card'), ('slider', 'Slider'), ('gallery', 'Galeria'), ('accordion', 'Accordion'), ('alert', 'Alerta'), ('badge', 'Badge'), ('breadcrumb', 'Breadcrumb'), ('button', 'Botão'), ('button_group', 'Grupo de Botões'), ('carousel', 'Carrossel'), ('close_button', 'Botão de Fechar'), ('collapse', 'Collapse'), ('dropdown', 'Dropdown'), ('list_group', 'Grupo de Lista'), ('modal', 'Modal'), ('navbar', 'Barra de Navegação'), ('nav_tabs', 'Navegação e Abas'), ('offcanvas', 'Offcanvas'), ('pagination', 'Paginação'), ('placeholder', 'Placeholder'), ('popover', 'Popover'), ('progress', 'Barra de Progresso'), ('scrollspy', 'Scrollspy'), ('spinner', 'Spinner'), ('toast', 'Toast'), ('tooltip', 'Tooltip'), ('custom', 'Personalizado')], help_text='Tipo do componente', max_length=20, verbose_name='Tipo de Componente')),
                ('template_code', models.TextField(blank=True, help_text='Código HTML do template do componente', verbose_name='Código do Template')),
                ('css_code', models.TextField(blank=True, help_text='Código CSS específico do componente', verbose_name='Código CSS')),
                ('js_code', models.TextField(blank=True, help_text='Código JavaScript específico do componente', verbose_name='Código JavaScript')),
                ('default_context', models.JSONField(blank=True, help_text='Variáveis de contexto padrão em formato JSON', null=True, verbose_name='Contexto Padrão')),
                ('icon', models.CharField(blank=True, help_text='Nome da classe do ícone (FontAwesome, Bootstrap Icons, etc.)', max_length=50, verbose_name='Ícone')),
                ('thumbnail', models.ImageField(blank=True, help_text='Imagem miniatura do componente', null=True, upload_to='components/thumbnails/', verbose_name='Miniatura')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL, verbose_name='Criado por')),
                ('updated_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='Atualizado por')),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='components', to='widgets.templatecategory', verbose_name='Categoria')),
            ],
            options={
                'verbose_name': 'Componente',
                'verbose_name_plural': 'Componentes',
            },
        ),
        migrations.CreateModel(
            name='TemplateRegion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Nome da região', max_length=100, verbose_name='Nome')),
                ('slug', models.SlugField(help_text='Identificador único da região no template', max_length=100, verbose_name='Slug')),
                ('description', models.TextField(blank=True, help_text='Descrição do propósito da região', verbose_name='Descrição')),
                ('order', models.PositiveIntegerField(default=0, help_text='Ordem de exibição da região', verbose_name='Ordem')),
                ('is_required', models.BooleanField(default=False, help_text='Define se a região é obrigatória no template', verbose_name='Obrigatória')),
                ('max_blocks', models.PositiveIntegerField(default=0, help_text='Número máximo de blocos permitidos (0 = ilimitado)', verbose_name='Máximo de Blocos')),
                ('allowed_block_types', models.ManyToManyField(blank=True, help_text='Tipos de componentes que podem ser adicionados nesta região', related_name='allowed_in_regions', to='widgets.componenttemplate', verbose_name='Tipos de Blocos Permitidos')),
                ('template', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='regions', to='widgets.djangotemplate', verbose_name='Template')),
            ],
            options={
                'verbose_name': 'Região de Template',
                'verbose_name_plural': 'Regiões de Templates',
                'ordering': ['template', 'order'],
                'unique_together': {('template', 'slug')},
            },
        ),
        migrations.CreateModel(
            name='TemplateType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Nome do template', max_length=100, verbose_name='Nome')),
                ('slug', models.SlugField(help_text='Identificador único para o template', max_length=100, unique=True, verbose_name='Slug')),
                ('description', models.TextField(blank=True, help_text='Descrição do propósito do template', verbose_name='Descrição')),
                ('is_active', models.BooleanField(default=True, help_text='Define se o template está disponível para uso', verbose_name='Ativo')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Data de Criação')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Última Atualização')),
                ('type', models.CharField(choices=[('page', 'Página Completa'), ('section', 'Seção'), ('header', 'Cabeçalho'), ('footer', 'Rodapé'), ('sidebar', 'Barra Lateral'), ('component', 'Componente'), ('widget', 'Widget'), ('custom', 'Personalizado')], help_text='Tipo de estrutura do template', max_length=20, verbose_name='Tipo')),
                ('icon', models.CharField(blank=True, help_text='Nome da classe do ícone (FontAwesome, Bootstrap Icons, etc.)', max_length=50, verbose_name='Ícone')),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='template_types', to='widgets.templatecategory', verbose_name='Categoria')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL, verbose_name='Criado por')),
                ('updated_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='Atualizado por')),
            ],
            options={
                'verbose_name': 'Tipo de Template',
                'verbose_name_plural': 'Tipos de Templates',
            },
        ),
        migrations.AddField(
            model_name='djangotemplate',
            name='type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='django_templates', to='widgets.templatetype', verbose_name='Tipo de Template'),
        ),
        migrations.CreateModel(
            name='Widget',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Nome do template', max_length=100, verbose_name='Nome')),
                ('slug', models.SlugField(help_text='Identificador único para o template', max_length=100, unique=True, verbose_name='Slug')),
                ('description', models.TextField(blank=True, help_text='Descrição do propósito do template', verbose_name='Descrição')),
                ('is_active', models.BooleanField(default=True, help_text='Define se o template está disponível para uso', verbose_name='Ativo')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Data de Criação')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Última Atualização')),
                ('widget_type', models.CharField(choices=[('text', 'Texto'), ('html', 'HTML'), ('menu', 'Menu'), ('recent_posts', 'Posts Recentes'), ('categories', 'Categorias'), ('tags', 'Tags'), ('search', 'Busca'), ('login', 'Login'), ('social', 'Redes Sociais'), ('contact', 'Contato'), ('image', 'Imagem'), ('video', 'Vídeo'), ('map', 'Mapa'), ('form', 'Formulário'), ('custom', 'Personalizado')], help_text='Tipo do widget', max_length=20, verbose_name='Tipo de Widget')),
                ('template_code', models.TextField(blank=True, help_text='Código HTML do template do widget', verbose_name='Código do Template')),
                ('css_code', models.TextField(blank=True, help_text='Código CSS específico do widget', verbose_name='Código CSS')),
                ('js_code', models.TextField(blank=True, help_text='Código JavaScript específico do widget', verbose_name='Código JavaScript')),
                ('default_settings', models.JSONField(blank=True, help_text='Configurações padrão em formato JSON', null=True, verbose_name='Configurações Padrão')),
                ('icon', models.CharField(blank=True, help_text='Nome da classe do ícone (FontAwesome, Bootstrap Icons, etc.)', max_length=50, verbose_name='Ícone')),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='widgets', to='widgets.templatecategory', verbose_name='Categoria')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL, verbose_name='Criado por')),
                ('updated_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='Atualizado por')),
            ],
            options={
                'verbose_name': 'Widget',
                'verbose_name_plural': 'Widgets',
            },
        ),
        migrations.CreateModel(
            name='WidgetArea',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Nome da área de widgets', max_length=100, verbose_name='Nome')),
                ('slug', models.SlugField(help_text='Identificador único da área de widgets', max_length=100, verbose_name='Slug')),
                ('description', models.TextField(blank=True, help_text='Descrição do propósito da área de widgets', verbose_name='Descrição')),
                ('order', models.PositiveIntegerField(default=0, help_text='Ordem de exibição da área de widgets', verbose_name='Ordem')),
                ('css_classes', models.CharField(blank=True, help_text='Classes CSS adicionais para a área de widgets', max_length=255, verbose_name='Classes CSS')),
                ('max_widgets', models.PositiveIntegerField(default=0, help_text='Número máximo de widgets permitidos (0 = ilimitado)', verbose_name='Máximo de Widgets')),
                ('template', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='widget_areas', to='widgets.djangotemplate', verbose_name='Template')),
            ],
            options={
                'verbose_name': 'Área de Widgets',
                'verbose_name_plural': 'Áreas de Widgets',
                'ordering': ['template', 'order'],
                'unique_together': {('template', 'slug')},
            },
        ),
        migrations.CreateModel(
            name='ComponentInstance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.PositiveIntegerField(default=0, help_text='Ordem de exibição do componente na região', verbose_name='Ordem')),
                ('context_data', models.JSONField(blank=True, help_text='Dados específicos para esta instância em formato JSON', null=True, verbose_name='Dados de Contexto')),
                ('custom_css', models.TextField(blank=True, help_text='CSS personalizado para esta instância do componente', verbose_name='CSS Personalizado')),
                ('custom_classes', models.CharField(blank=True, help_text='Classes CSS adicionais para esta instância', max_length=255, verbose_name='Classes CSS Personalizadas')),
                ('is_visible', models.BooleanField(default=True, help_text='Define se o componente está visível', verbose_name='Visível')),
                ('visibility_rules', models.JSONField(blank=True, help_text='Regras para exibição condicional (JSON)', null=True, verbose_name='Regras de Visibilidade')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Data de Criação')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Última Atualização')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='component_instances_created', to=settings.AUTH_USER_MODEL, verbose_name='Criado por')),
                ('updated_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='component_instances_updated', to=settings.AUTH_USER_MODEL, verbose_name='Atualizado por')),
                ('component', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='instances', to='widgets.componenttemplate', verbose_name='Componente')),
                ('region', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='component_instances', to='widgets.templateregion', verbose_name='Região')),
            ],
            options={
                'verbose_name': 'Instância de Componente',
                'verbose_name_plural': 'Instâncias de Componentes',
                'ordering': ['region', 'order'],
                'unique_together': {('region', 'order')},
            },
        ),
        migrations.CreateModel(
            name='WidgetInstance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, help_text='Título opcional para esta instância do widget', max_length=100, verbose_name='Título')),
                ('order', models.PositiveIntegerField(default=0, help_text='Ordem de exibição do widget na área', verbose_name='Ordem')),
                ('widget_settings', models.JSONField(blank=True, help_text='Configurações específicas para esta instância em formato JSON', null=True, verbose_name='Configurações')),
                ('custom_css', models.TextField(blank=True, help_text='CSS personalizado para esta instância do widget', verbose_name='CSS Personalizado')),
                ('custom_classes', models.CharField(blank=True, help_text='Classes CSS adicionais para esta instância', max_length=255, verbose_name='Classes CSS Personalizadas')),
                ('is_visible', models.BooleanField(default=True, help_text='Define se o widget está visível', verbose_name='Visível')),
                ('visibility_rules', models.JSONField(blank=True, help_text='Regras para exibição condicional (JSON)', null=True, verbose_name='Regras de Visibilidade')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Data de Criação')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Última Atualização')),
                ('area', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='widget_instances', to='widgets.widgetarea', verbose_name='Área de Widgets')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='widget_instances_created', to=settings.AUTH_USER_MODEL, verbose_name='Criado por')),
                ('updated_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='widget_instances_updated', to=settings.AUTH_USER_MODEL, verbose_name='Atualizado por')),
                ('widget', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='instances', to='widgets.widget', verbose_name='Widget')),
            ],
            options={
                'verbose_name': 'Instância de Widget',
                'verbose_name_plural': 'Instâncias de Widgets',
                'ordering': ['area', 'order'],
                'unique_together': {('area', 'order')},
            },
        ),
    ]
